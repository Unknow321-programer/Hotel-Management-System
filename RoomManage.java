// package hotel_management_system;

import java.awt.event.*;
import java.sql.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import javax.naming.spi.DirStateFactory.Result;
import javax.swing.BorderFactory;
import javax.swing.JOptionPane;

import java.awt.*;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
// package login_register;

import javax.swing.table.DefaultTableModel;

/**
 *
 * @author admin
 */
public class RoomManage extends javax.swing.JFrame {

    /**
     * Creates new form RoomManage
     */
    boolean troom_noc=false,tPrice=false,roomtype=false,bedtype=false;
    
    public RoomManage(String name) {
        initComponents(name);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents(String Manager_name) {

        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        topPanel = new javax.swing.JPanel();
        lRoomNo = new javax.swing.JLabel();
        lRoomType = new javax.swing.JLabel();
        lBedType = new javax.swing.JLabel();
        tRoomNo = new javax.swing.JTextField();
        bedType = new javax.swing.JComboBox<>();
        RoomType = new javax.swing.JComboBox<>();
        lprice = new javax.swing.JLabel();
        tprice = new javax.swing.JTextField();
        clear = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        Delete = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        lRoomManage = new javax.swing.JLabel();
        lLogOut = new javax.swing.JLabel();
        bgimg = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Room No", "Bed", "Room Type", "Price"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(jTable1);
        try {
            Connection con = new dbConnection().getDbconnection();
            Statement stm = con.createStatement();
            String q = "select room_no,bed,room_type,price from room_info";
            ResultSet rs = stm.executeQuery(q);
            DefaultTableModel tablem = (DefaultTableModel)jTable1.getModel();
            while(rs.next()) {
                String MaS[] = {Integer.toString(rs.getInt("room_no")),rs.getString("bed"),rs.getString("room_type"),Double.toString(rs.getDouble("price"))};
                tablem.addRow(MaS);
            }
            con.close();
        }
        catch(Exception e) {
            System.out.println(e);
        }

        getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 360, 745, 313));

        topPanel.setBackground(new java.awt.Color(153, 204, 255));
        topPanel.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(153, 204, 255), new java.awt.Color(153, 204, 255), new java.awt.Color(153, 204, 255), new java.awt.Color(153, 204, 255)));

        lRoomNo.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lRoomNo.setText("Room No. :-");

        lRoomType.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lRoomType.setText("Room Type:-");

        lBedType.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lBedType.setText("Bed Type:-");

        tRoomNo.setBackground(new java.awt.Color(153, 204, 255));
        tRoomNo.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(0, 0, 0)));
        tRoomNo.addKeyListener(new java.awt.event.KeyAdapter() {
            Boolean d=false,other=false;
            
            String a="";
            public void keyReleased(KeyEvent ke) {
                int j = ke.getKeyCode();
                if(j!=KeyEvent.VK_BACK_SPACE && j!=KeyEvent.VK_DELETE) {
                    char c = ke.getKeyChar();
                    if( (((c>='0' && c<='9') || c==',') && other!=true)) {
                        d=true;
                        if((c>='0' && c<='9')) {
                            a+=c;
                        }
                    }
                    else{
                        other=true;
                    }
                    
                }
                if(j==KeyEvent.VK_BACK_SPACE || j==KeyEvent.VK_DELETE && tRoomNo.getText()!=null) {
                    other=false;d=false;a="";
                    String s = tRoomNo.getText();
                    
                    if(s.length()!=0) {
                        for (int i = 0; i < s.length(); i++) {
                            if( (s.charAt(i)>='0' && s.charAt(i)<='9') || s.charAt(i)==',') {
                                d=true;
                                if((s.charAt(i)>='0' && s.charAt(i)<='9')) {
                                    a+=s.charAt(i);
                                }
                            }
                            else {
                                d=false;
                                other=true;
                            }
                        }
                    }
                }
                if(d==true && other==false && (a.length()%3==0)) {
                    tRoomNo.setBorder(BorderFactory.createMatteBorder(0, 0, 2, 0, Color.GREEN));
                    troom_noc=true;
                    
                }
                else {
                    troom_noc=false;
                    tRoomNo.setBorder(BorderFactory.createMatteBorder(0, 0, 2, 0, Color.RED));
                    // Log.setVisible(false);
                }
            }
        });

        bedType.setBackground(new java.awt.Color(153, 204, 255));
        bedType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Bed Type", "Single", "Double" }));
        bedType.setBorder(null);
        bedType.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent ae) {
                bedTypeActionListener(ae);
            }
        });

        RoomType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Room Type", "Ac", "non-Ac" }));
        RoomType.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent ae) {
                RoomTypeActionListener(ae);
            }
        });

        lprice.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lprice.setText("Price:-");

        tprice.setBackground(new java.awt.Color(153, 204, 255));
        tprice.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(0, 0, 0)));
        tprice.addKeyListener(new KeyAdapter() {
            public void keyReleased(KeyEvent ke) {
                tpriceKeyReleased(ke);
            }
        });

        clear.setBackground(new java.awt.Color(255, 153, 51));
        clear.setText("Clear");
        clear.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent ae) {
                clearActionListener(ae);
            }
        });

        jButton2.setBackground(new java.awt.Color(255, 153, 51));
        jButton2.setText("Add");
        jButton2.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent ae) {
                jButton2ActionListener(ae);
            }
        });

        Delete.setBackground(new java.awt.Color(255, 153, 51));
        Delete.setText("Delete");
        Delete.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent ae) {
                DeleteActionListener(ae);
            }
        });

        javax.swing.GroupLayout topPanelLayout = new javax.swing.GroupLayout(topPanel);
        topPanel.setLayout(topPanelLayout);
        topPanelLayout.setHorizontalGroup(
            topPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(topPanelLayout.createSequentialGroup()
                .addGap(66, 66, 66)
                .addGroup(topPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(topPanelLayout.createSequentialGroup()
                        .addGroup(topPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lRoomNo, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lRoomType, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tRoomNo, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(RoomType, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 92, Short.MAX_VALUE)
                        .addGroup(topPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lBedType, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(bedType, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lprice, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tprice, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(61, 61, 61))
                    .addGroup(topPanelLayout.createSequentialGroup()
                        .addComponent(clear, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(29, 29, 29)
                        .addComponent(Delete, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(134, 134, 134))))
        );
        topPanelLayout.setVerticalGroup(
            topPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(topPanelLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(topPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lBedType)
                    .addComponent(lRoomNo, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(9, 9, 9)
                .addGroup(topPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tRoomNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bedType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addGroup(topPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lRoomType, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lprice))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(topPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(RoomType)
                    .addComponent(tprice))
                .addGap(18, 18, 18)
                .addGroup(topPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(clear, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Delete, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(23, Short.MAX_VALUE))
        );

        getContentPane().add(topPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 110, -1, -1));

        jPanel1.setBackground(new java.awt.Color(255, 102, 51));

        lRoomManage.setFont(new java.awt.Font("Imprint MT Shadow", 1, 18)); // NOI18N
        lRoomManage.setForeground(new java.awt.Color(255, 255, 255));
        lRoomManage.setText("Room Manage");
        lRoomManage.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(255, 255, 102)));
        lRoomManage.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent e) {
                lRoomManageMouseEnterd(e);
            }
            public void mouseClicked(java.awt.event.MouseEvent me) {
                lRoomManageMouseClicked(me,Manager_name);
            }
            public void mouseExited(java.awt.event.MouseEvent me) {
                lRoomManageMouseExited(me);
            }
        });

        lLogOut.setFont(new java.awt.Font("Imprint MT Shadow", 1, 18)); // NOI18N
        lLogOut.setForeground(new java.awt.Color(255, 255, 255));
        lLogOut.setText("Home");
        lLogOut.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent e) {
                lLogOutMouseEnterd(e);
            }
            public void mouseClicked(java.awt.event.MouseEvent me) {
                lLogOutMouseClicked(me,Manager_name);
            }
            public void mouseExited(java.awt.event.MouseEvent me) {
                lLogOutMouseExited(me);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lLogOut, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 826, Short.MAX_VALUE)
                .addComponent(lRoomManage)
                .addGap(35, 35, 35))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lRoomManage, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lLogOut))
                .addContainerGap())
        );

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1080, 47));

        bgimg.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        bgimg.setIcon(new javax.swing.ImageIcon(getClass().getResource("Images/bg1.jpeg"))); // NOI18N
        getContentPane().add(bgimg, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1080, 700));

        pack();
    }// </editor-fold>//GEN-END:initComponents


    //  home page manager 
    protected void lLogOutMouseClicked(MouseEvent me, String manager_name) {
        if(me.getSource()==lLogOut) {
            dispose();
            new Manager_Home(manager_name).setVisible(true);
        }
    }

    protected void lLogOutMouseExited(MouseEvent me) {
        lLogOut.setForeground(Color.white);
        lLogOut.setBorder(null);
    }

    protected void lLogOutMouseEnterd(MouseEvent e) {
        lLogOut.setForeground(new java.awt.Color(126,90,200));
        lLogOut.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, Color.black));
    }


    // room manager here
    protected void lRoomManageMouseClicked(MouseEvent me, Object manager_name2) {
        // nothing here
    }

    protected void lRoomManageMouseExited(MouseEvent me) {
        lRoomManage.setForeground(Color.white);
        lRoomManage.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(255, 255, 102)));
    }

    protected void lRoomManageMouseEnterd(MouseEvent e) {
        lRoomManage.setForeground(new java.awt.Color(126,90,200));
        lRoomManage.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, Color.black));
    }

    // other here 
    protected void tpriceKeyReleased(KeyEvent ke) {
        String PATTERN = "^[0-9]{0,18}[.]{0,1}[0-9]{0,2}$";
        Pattern patt = Pattern.compile(PATTERN);
        Matcher match = patt.matcher(tprice.getText());
        if (!match.matches()) {
            tprice.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, (new java.awt.Color(255, 0, 0))));
            // tidc = false;
            tPrice=false;
        } else {
            // tidc=true;
            tprice.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(0, 255, 0)));
            tPrice=true;
        }
    }

    protected void DeleteActionListener(ActionEvent ae) {
        boolean check=false;
        if(tRoomNo.getText().equals("")) {
            JOptionPane.showMessageDialog(Delete, "Room Number not be null","Invalid ) :",JOptionPane.WARNING_MESSAGE);
        }
        else if(roomtype!=true || bedtype!=true) {
            JOptionPane.showMessageDialog(Delete, "Select type","Invalid",JOptionPane.WARNING_MESSAGE);
        }
        else {
            String[] roomno = tRoomNo.getText().split(",");
            for (int i = 0; i < roomno.length; i++) {
                try {
                    Connection con = new dbConnection().getDbconnection();
                    Statement stm = con.createStatement();
                    String q = "select room_no from room_info where room_no = "+roomno[i]+" and room_status=true ";
                    ResultSet rs = stm.executeQuery(q);
                    if(rs.next()) {
                        check=true;
                    }
                    else {
                        check=false;
                        break;
                    }
                } catch (Exception e) {
                    //TODO: handle exception
                }
            }
            if(check==true) {
                for (int i = 0; i < roomno.length; i++) {
                    try {
                        Connection con = new dbConnection().getDbconnection();
                        Statement stm = con.createStatement();
                        String q = "delete from room_info where room_no = "+roomno[i]+" ";
                        int x = stm.executeUpdate(q);
                        if(x!=0) {
                            JOptionPane.showMessageDialog(null, "Deleted Room No. "+roomno[i], "Deleted", JOptionPane.WARNING_MESSAGE);
                        }
                        else {
                            JOptionPane.showMessageDialog(null, "Not Deleted Room No. "+roomno[i], "Something Wrong", JOptionPane.WARNING_MESSAGE);
                        }
                        con.close();
                    } catch (Exception e) {
                        //TODO: handle exception
                    }
                }
                try {
                    Connection con = new dbConnection().getDbconnection();

                    DefaultTableModel tbalem = (DefaultTableModel)jTable1.getModel();
                    while(tbalem.getRowCount()>0) 
                    tbalem.removeRow(tbalem.getRowCount()-1);
                    String q1 = "select room_no,bed,room_type,price from room_info";
                    Statement stm1 = con.createStatement();
                    ResultSet rset = stm1.executeQuery(q1);
                    while(rset.next()) {
                        String sa[] = {Integer.toString(rset.getInt("room_no")),rset.getString("bed"),rset.getString("room_type"),Double.toString(rset.getDouble("price"))};
                        tbalem.addRow(sa);
                    }
                } catch (Exception e) {
                    //TODO: handle exception
                }
                
            }
            else {
                JOptionPane.showMessageDialog(jButton2, "Room Number doesn't exit", "Room is not found", JOptionPane.WARNING_MESSAGE);
            }
        }
    }

    protected void clearActionListener(ActionEvent ae) {
        RoomType.setSelectedIndex(0);
        bedType.setSelectedIndex(0);
        tRoomNo.setText("");
        tprice.setText("");
    }

    protected void jButton2ActionListener(ActionEvent ae) {
        boolean check=false;
        if(tRoomNo.getText().equals("")) {
            JOptionPane.showMessageDialog(jButton2, "Please Provied room's Number ?","Invalid",JOptionPane.WARNING_MESSAGE);
        }
        else if(tprice.getText().equals("")) {
            JOptionPane.showMessageDialog(jButton2, "Empty Price ", "Invalid", JOptionPane.WARNING_MESSAGE);
        }
        else if(roomtype!=true || bedtype!=true) {
            JOptionPane.showMessageDialog(jButton2, "Choose Roomtype or bedtype ", "Invalid", JOptionPane.WARNING_MESSAGE);
        }
        else {
            String[] roomno = tRoomNo.getText().split(",");
            // System.out.println(roomno[0]+" "+roomno[1]);
            for (int i = 0; i < roomno.length; i++) {
                try {
                    Connection con = new dbConnection().getDbconnection();
                    Statement stm = con.createStatement();
                    String q = "select * from room_info where room_no = "+roomno[i]+" ";
                    ResultSet rs = stm.executeQuery(q);
                    if(rs.next()) {
                        check=false;
                        break;
                    }
                    else {
                        check=true;
                    }
                } catch (Exception e) {
                    System.out.println(e);
                }
            }
            if(check==true) {
                for (int i = 0; i < roomno.length; i++) {
                    try {
                        Connection con = new dbConnection().getDbconnection();
                        Statement stm = con.createStatement();
                        String q = "insert into room_info(room_no,bed,room_type,room_status,price)"+
                        "values("+roomno[i]+", '"+bedType.getItemAt(bedType.getSelectedIndex())+"', '"+RoomType.getItemAt(RoomType.getSelectedIndex())+"' , true , "+tprice.getText()+" )";
                        int x = stm.executeUpdate(q);
                        if(x!=0) {
                            JOptionPane.showMessageDialog(jButton2, "Room No "+roomno[i]+" is Entered", "done!", JOptionPane.PLAIN_MESSAGE);
                        }
                        else {
                            JOptionPane.showMessageDialog(jButton2, "Room No "+roomno[i]+" is Not Entered", "Not Fine!", JOptionPane.PLAIN_MESSAGE);
                        }
                    } catch (Exception e) {
                        System.out.println(e);
                    }
                }
                try {
                    Connection con = new dbConnection().getDbconnection();

                    DefaultTableModel tbalem = (DefaultTableModel)jTable1.getModel();
                    while(tbalem.getRowCount()>0) 
                    tbalem.removeRow(tbalem.getRowCount()-1);
                    String q1 = "select room_no,bed,room_type,price from room_info";
                    Statement stm1 = con.createStatement();
                    ResultSet rset = stm1.executeQuery(q1);
                    while(rset.next()) {
                        String sa[] = {Integer.toString(rset.getInt("room_no")),rset.getString("bed"),rset.getString("room_type"),Double.toString(rset.getDouble("price"))};
                        tbalem.addRow(sa);
                    }
                } catch (Exception e) {
                    //TODO: handle exception
                }

            }
            else {
                JOptionPane.showMessageDialog(tRoomNo, "Same Room Are Also Available", "Room Founds", JOptionPane.WARNING_MESSAGE);
            }
        }
    }

    protected void RoomTypeActionListener(ActionEvent ae) {
        if(RoomType.getSelectedIndex()==0) {
            //false;
            RoomType.setBackground(Color.red);
            roomtype = false;
        }
        else if(RoomType.getSelectedIndex()>0){
            // true
            RoomType.setBackground(Color.green);
            roomtype = true;
        }
    }

    protected void bedTypeActionListener(ActionEvent ae) {
        if(bedType.getSelectedIndex()==0) {
            // false;
            bedType.setBackground(Color.red);
            bedtype=false;
        }
        else if(bedType.getSelectedIndex()>0) {
            //true
            bedType.setBackground(Color.green);
            bedtype=true;
        }
    }

    /**
     * @param args the command line arguments
     */
    // public static void main(String args[]) {
    //     /* Set the Nimbus look and feel */
    //     //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
    //     /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
    //      * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
    //      */
    //     try {
    //         for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
    //             if ("Nimbus".equals(info.getName())) {
    //                 javax.swing.UIManager.setLookAndFeel(info.getClassName());
    //                 break;
    //             }
    //         }
    //     } catch (ClassNotFoundException ex) {
    //         java.util.logging.Logger.getLogger(RoomManage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    //     } catch (InstantiationException ex) {
    //         java.util.logging.Logger.getLogger(RoomManage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    //     } catch (IllegalAccessException ex) {
    //         java.util.logging.Logger.getLogger(RoomManage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    //     } catch (javax.swing.UnsupportedLookAndFeelException ex) {
    //         java.util.logging.Logger.getLogger(RoomManage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    //     }
    //     //</editor-fold>
    //     //</editor-fold>

    //     /* Create and display the form */
    //     java.awt.EventQueue.invokeLater(new Runnable() {
    //         public void run() {
    //             new RoomManage("name").setVisible(true);
    //         }
    //     });
    // }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Delete;
    private javax.swing.JComboBox<String> RoomType;
    private javax.swing.JComboBox<String> bedType;
    private javax.swing.JLabel bgimg;
    private javax.swing.JButton clear;
    private javax.swing.JButton jButton2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel lBedType;
    private javax.swing.JLabel lLogOut;
    private javax.swing.JLabel lRoomManage;
    private javax.swing.JLabel lRoomNo;
    private javax.swing.JLabel lRoomType;
    private javax.swing.JLabel lprice;
    private javax.swing.JTextField tRoomNo;
    private javax.swing.JPanel topPanel;
    private javax.swing.JTextField tprice;
    // End of variables declaration//GEN-END:variables
}
