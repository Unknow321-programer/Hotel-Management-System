// package hotel_management_system;

import java.awt.event.*;
import java.awt.*;
import javax.swing.*;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

import java.sql.*;
import java.text.SimpleDateFormat;
import java.util.regex.Matcher;
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

import java.util.regex.Pattern;

/**
 *
 * @author admin
 */
public class Room_Booking extends javax.swing.JFrame {

    /**
     * Creates new form RoomBooking
     */
    boolean tnamec = false, tcheck_inc = true, troom_no = true, tgustc = false, tidc = false;

    public Room_Booking(String name,String Email) {
        initComponents(name,Email);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents(String Manager_name , String CustEmail) {

        DataScroll = new javax.swing.JScrollPane();
        DataTable = new javax.swing.JTable();
        BookPanel = new javax.swing.JPanel();
        lname = new javax.swing.JLabel();
        lcheck_in = new javax.swing.JLabel();
        lid = new javax.swing.JLabel();
        lguest = new javax.swing.JLabel();
        lRoonNo = new javax.swing.JLabel();
        lprice = new javax.swing.JLabel();
        lRoomType = new javax.swing.JLabel();
        lBed = new javax.swing.JLabel();
        tname = new javax.swing.JTextField();
        tguest = new javax.swing.JTextField();
        tcheck_in = new javax.swing.JTextField();
        tID = new javax.swing.JTextField();
        tRoomNo = new javax.swing.JTextField();
        tprice = new javax.swing.JTextField();
        clear = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        bedList = new javax.swing.JComboBox<>();
        RoomType = new javax.swing.JComboBox<>();
        jPanel3 = new javax.swing.JPanel();
        lRoomBooking1 = new javax.swing.JLabel();
        lRoomOut1 = new javax.swing.JLabel();
        lCustomeRoom = new javax.swing.JLabel();
        lHome1 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        DataTable.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        DataTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Room No.", "Bed", "Room Type", "Price"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        DataScroll.setViewportView(DataTable);

        getContentPane().add(DataScroll, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 399, 960, 250));

        BookPanel.setBackground(new java.awt.Color(153, 204, 255));
        BookPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(153, 204, 255), new java.awt.Color(153, 204, 255), new java.awt.Color(153, 204, 255), new java.awt.Color(153, 204, 255)));

        lname.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lname.setText("Email:-");

        lcheck_in.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lcheck_in.setText("Check In Date:-");

        lid.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lid.setText("ID Proof:- ");

        lguest.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lguest.setText("Total Guest:-");

        lRoonNo.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lRoonNo.setText("Room No. :-");

        lprice.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lprice.setText("Total Price:- ");

        lRoomType.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lRoomType.setText("Room Type:-");

        lBed.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lBed.setText("Bed Type:-");

        tname.setBackground(new java.awt.Color(153, 204, 255));
        tname.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(0, 255, 0)));
        tname.setText(CustEmail);
        tname.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tnameKeyReleased(evt);
            }
        });

        tguest.setBackground(new java.awt.Color(153, 204, 255));
        tguest.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(0, 0, 0)));
        tguest.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent ke) {
                tguestkeyReleased(ke);
            }
        });

        tcheck_in.setBackground(new java.awt.Color(153, 204, 255));
        SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");
        java.util.Date d = new java.util.Date();
        tcheck_in.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(0, 255, 0)));
        tcheck_in.setText(sdf.format(d));
        tcheck_in.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent ke) {
                tcheck_inkeyReleased(ke);
            }
        });

        tID.setBackground(new java.awt.Color(153, 204, 255));
        tID.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(0, 0, 0)));
        tID.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent ke) {
                tIDkeyReleased(ke);
            }
        });

        tRoomNo.setBackground(new java.awt.Color(153, 204, 255));
        tRoomNo.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(0, 0, 0)));
        tRoomNo.addKeyListener(new java.awt.event.KeyAdapter() {
            Boolean d=false,other=false;
            String a="";
            public void keyReleased(KeyEvent ke) {
                int j = ke.getKeyCode();
                if(j!=KeyEvent.VK_BACK_SPACE && j!=KeyEvent.VK_DELETE) {
                    char c = ke.getKeyChar();
                    if( (((c>='0' && c<='9') || c==',') && other!=true)) {
                        d=true;
                        if((c>='0' && c<='9')) {
                            a+=c;
                        }
                    }
                    else{
                        other=true;
                    }
                    
                }
                if(j==KeyEvent.VK_BACK_SPACE || j==KeyEvent.VK_DELETE && tRoomNo.getText()!=null) {
                    other=false;d=false;a="";
                    String s = tRoomNo.getText();
                    
                    if(s.length()!=0) {
                        for (int i = 0; i < s.length(); i++) {
                            if( (s.charAt(i)>='0' && s.charAt(i)<='9') || s.charAt(i)==',') {
                                d=true;
                                if((s.charAt(i)>='0' && s.charAt(i)<='9')) {
                                    a+=s.charAt(i);
                                }
                            }
                            else {
                                d=false;
                                other=true;
                            }
                        }
                    }
                }
                if(d==true && other==false && (a.length()%3==0)) {
                    tRoomNo.setBorder(BorderFactory.createMatteBorder(0, 0, 2, 0, Color.GREEN));
                    tnamec=true;
                    String t="";
                    Double price =0d;
                    for(int i=0; i<a.length() ; i++) {
                        t+=a.charAt(i);
                        if(t.length()==3) {
                            try {
                                Connection con = new dbConnection().getDbconnection();
                                Statement stm = con.createStatement();
                                String sq = "select price from room_info where room_no='"+t+"'";
                                ResultSet rs = stm.executeQuery(sq);
                                if(rs.next()) {
                                    price+=rs.getDouble("price");
                                }
                                con.close();
                            }
                            catch(Exception e) {
                                // System.out.println(e);
                            }
                            t="";
                        }
                    }
                    tprice.setText(Double.toString(price));
                    price=0d;
                    // Log.setVisible(true);
                }
                else {
                    tnamec=false;
                    tRoomNo.setBorder(BorderFactory.createMatteBorder(0, 0, 2, 0, Color.RED));
                    // Log.setVisible(false);
                }
                
            }
        });

        tprice.setBackground(new java.awt.Color(153, 204, 255));
        tprice.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(0, 0, 0)));
        tprice.setEditable(false);


        clear.setBackground(new java.awt.Color(255, 153, 51));
        clear.setFont(new java.awt.Font("Arial Rounded MT Bold", 1, 18)); // NOI18N
        clear.setForeground(new java.awt.Color(255, 255, 255));
        clear.setText("Clear");
        clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent ae) {
                clearActionPerformed(ae);
            }
        });

        jButton2.setBackground(new java.awt.Color(255, 153, 51));
        jButton2.setFont(new java.awt.Font("Arial Rounded MT Bold", 1, 18)); // NOI18N
        jButton2.setForeground(new java.awt.Color(255, 255, 255));
        jButton2.setText("Book");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent ae) {
                jButton2ActionPerformed(ae,Manager_name,CustEmail);
            }
        });

        bedList.setBackground(new java.awt.Color(153, 204, 255));
        bedList.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Bed Type", "Single", "Double" }));
        bedList.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        bedList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent ae) {
                bedListActionPerformed(ae);
            }
        });

        RoomType.setBackground(new java.awt.Color(153, 204, 255));
        RoomType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Room Type", "non-Ac", "Ac" }));
        RoomType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent ae) {
                RoomTypeActionPerformed(ae);
            }
        });

        javax.swing.GroupLayout BookPanelLayout = new javax.swing.GroupLayout(BookPanel);
        BookPanel.setLayout(BookPanelLayout);
        BookPanelLayout.setHorizontalGroup(
            BookPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, BookPanelLayout.createSequentialGroup()
                .addGap(73, 73, 73)
                .addGroup(BookPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lcheck_in, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lguest, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lname, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tname)
                    .addComponent(tguest)
                    .addComponent(tcheck_in, javax.swing.GroupLayout.DEFAULT_SIZE, 220, Short.MAX_VALUE))
                .addGap(68, 68, 68)
                .addGroup(BookPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lRoonNo, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tID, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tRoomNo, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lBed, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bedList, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lid, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 85, Short.MAX_VALUE)
                .addGroup(BookPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lRoomType, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(RoomType, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lprice, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tprice, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(clear))
                .addGap(70, 70, 70))
        );
        BookPanelLayout.setVerticalGroup(
            BookPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(BookPanelLayout.createSequentialGroup()
                .addContainerGap(21, Short.MAX_VALUE)
                .addGroup(BookPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lname)
                    .addComponent(lid)
                    .addComponent(lRoomType))
                .addGap(5, 5, 5)
                .addGroup(BookPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(RoomType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(BookPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lRoonNo)
                    .addComponent(lguest)
                    .addComponent(lprice))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(BookPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tguest, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(BookPanelLayout.createSequentialGroup()
                        .addGroup(BookPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tRoomNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tprice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(BookPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(BookPanelLayout.createSequentialGroup()
                                .addGroup(BookPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lcheck_in)
                                    .addComponent(lBed))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(BookPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(tcheck_in, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(bedList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, BookPanelLayout.createSequentialGroup()
                                .addComponent(clear)
                                .addGap(8, 8, 8)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton2)
                .addContainerGap(21, Short.MAX_VALUE))
        );

        getContentPane().add(BookPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 120, 960, 260));

        jPanel3.setBackground(new java.awt.Color(255, 102, 51));

        lRoomBooking1.setFont(new java.awt.Font("Imprint MT Shadow", 1, 18)); // NOI18N
        lRoomBooking1.setForeground(new java.awt.Color(255, 255, 255));
        lRoomBooking1.setText("Room Booking");
        lRoomBooking1.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(255, 255, 102)));
        lRoomBooking1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent e) {
                lRoomBookingMouseEnterd(e);
            }
            public void mouseClicked(java.awt.event.MouseEvent me) {
                lRoomBookingMouseClicked(me);
            }
            public void mouseExited(java.awt.event.MouseEvent me) {
                lRoomBookingMouseExited(me);
            }
        });

        lRoomOut1.setFont(new java.awt.Font("Imprint MT Shadow", 1, 18)); // NOI18N
        lRoomOut1.setForeground(new java.awt.Color(255, 255, 255));
        lRoomOut1.setText("Room Out");
        lRoomOut1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent e) {
                lRoomOutMouseEnterd(e);
            }
            public void mouseClicked(java.awt.event.MouseEvent me) {
                lRoomOutMouseClicked(me,Manager_name,CustEmail);
            }
            public void mouseExited(java.awt.event.MouseEvent me) {
                lRoomOutMouseExited(me);
            }
        });

        lCustomeRoom.setFont(new java.awt.Font("Imprint MT Shadow", 1, 18)); // NOI18N
        lCustomeRoom.setForeground(new java.awt.Color(255, 255, 255));
        lCustomeRoom.setText("Customize Room");
        lCustomeRoom.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent e) {
                lCustomeRoomMouseEnterd(e);
            }
            public void mouseClicked(java.awt.event.MouseEvent me) {
                lCustomeRoomMouseClicked(me,Manager_name,CustEmail);
            }
            public void mouseExited(java.awt.event.MouseEvent me) {
                lCustomeRoomMouseExited(me);
            }
        });

        lHome1.setFont(new java.awt.Font("Imprint MT Shadow", 1, 18)); // NOI18N
        lHome1.setForeground(new java.awt.Color(255, 255, 255));
        lHome1.setText("Home");
        lHome1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent e) {
                lhomeMouseEnterd(e);
            }
            public void mouseClicked(java.awt.event.MouseEvent me) {
                lhomeMouseClicked(me,Manager_name);
            }
            public void mouseExited(java.awt.event.MouseEvent me) {
                lhomeMouseExited(me);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(lHome1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 381, Short.MAX_VALUE)
                .addComponent(lRoomBooking1, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(94, 94, 94)
                .addComponent(lRoomOut1)
                .addGap(104, 104, 104)
                .addComponent(lCustomeRoom)
                .addGap(60, 60, 60))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lRoomBooking1)
                    .addComponent(lRoomOut1)
                    .addComponent(lHome1)
                    .addComponent(lCustomeRoom, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        getContentPane().add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1080, 40));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("Images/bg1.jpeg"))); // NOI18N
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1080, 700));

        pack();
    }// </editor-fold>//GEN-END:initComponents


    // here room out
    protected void lRoomOutMouseExited(MouseEvent me) {
        lRoomOut1.setForeground(new java.awt.Color(255, 255, 255));
        lRoomOut1.setBorder(null);
    }

    protected void lRoomOutMouseClicked(MouseEvent me, String manager_name, String custEmail) {
        
    }

    protected void lRoomOutMouseEnterd(MouseEvent e) {
        lRoomOut1.setForeground(new java.awt.Color(255,000,000));
        lRoomOut1.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, java.awt.Color.BLACK));
    }


    // room booking here
    protected void lRoomBookingMouseExited(MouseEvent me) {
        lRoomBooking1.setForeground(new java.awt.Color(255, 255, 255));
        lRoomBooking1.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(255, 255, 102)));
    }

    protected void lRoomBookingMouseClicked(MouseEvent me) {
    }

    protected void lRoomBookingMouseEnterd(MouseEvent e) {
        lRoomBooking1.setForeground(new java.awt.Color(126,90,200));
        lRoomBooking1.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, java.awt.Color.BLACK));
    }


    // customise room here
    protected void lCustomeRoomMouseClicked(MouseEvent me, String manager_name,String CustEmail) {
        
    }

    protected void lCustomeRoomMouseExited(MouseEvent me) {
        lCustomeRoom.setForeground(new java.awt.Color(255, 255, 255));
        lCustomeRoom.setBorder(null);
    }

    protected void lCustomeRoomMouseEnterd(MouseEvent e) {
        lCustomeRoom.setForeground(new java.awt.Color(255,000,000));
        lCustomeRoom.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, java.awt.Color.BLACK));
    }


    // home here
    protected void lhomeMouseExited(java.awt.event.MouseEvent me) {
        lHome1.setForeground(new java.awt.Color(255, 255, 255));
        lHome1.setBorder(null);
    }

    protected void lhomeMouseClicked(java.awt.event.MouseEvent me,String name) {
        if(me.getSource()==lHome1) {
            dispose();
            new Manager_Home(name).setVisible(true);
        }
    }

    protected void lhomeMouseEnterd(java.awt.event.MouseEvent e) {
        lHome1.setForeground(new java.awt.Color(126,90,200));
        lHome1.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, java.awt.Color.BLACK));
    }


    // other here 
    private void tnameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tnameKeyReleased
        // TODO add your handling code here:
        String PATTERN = "^[_A-Za-z0-9-\\+]{6,30}+(\\.[_A-Za-z0-9-]+)*@"
                + "[A-Za-z0-9-]+(\\.[A-Za-z0-9]+)*(\\.[A-Za-z]{2,})$";
        Pattern patt = Pattern.compile(PATTERN);
        Matcher match = patt.matcher(tname.getText());
        if (!match.matches()) {
            // JOptionPane.showMessageDialog(null, "Please enter the username");
            tname.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, (new java.awt.Color(255, 0, 0))));
            troom_no = false;
        } else {
            troom_no = true;
            tname.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(0, 255, 0)));
        }
    }//GEN-LAST:event_tnameKeyReleased

    protected void tcheck_inkeyReleased(KeyEvent ke) {
        String PATTERN = "^[0-3][0-9]-[0-1][0-9]-[0-9]{4}$";
        Pattern patt = Pattern.compile(PATTERN);
        Matcher match = patt.matcher(tcheck_in.getText());

        if (!match.matches()) {
            tcheck_in.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, (new java.awt.Color(255, 0, 0))));
            tcheck_inc = false;
        } else {
            String s = tcheck_in.getText();
            int i = s.indexOf("-");
            char c[] = new char[2];
            c[0] = s.charAt(i + 1);
            c[1] = s.charAt(i + 2);
            s = new String(c);
            i = Integer.parseInt(s);
            // System.out.println(i);
            if (i <= 12) {
                tcheck_in.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(0, 255, 0)));
                tcheck_inc = true;
            } else {
                tcheck_inc = false;
                tcheck_in.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, (new java.awt.Color(255, 0, 0))));
            }
        }
    }

    protected void tIDkeyReleased(KeyEvent ke) {
        String PATTERN = "^[0-9]{12}$";
        Pattern patt = Pattern.compile(PATTERN);
        Matcher match = patt.matcher(tID.getText());
        if (!match.matches()) {
            tID.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, (new java.awt.Color(255, 0, 0))));
            tidc = false;
        } else {
            tidc = true;
            tID.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(0, 255, 0)));
        }
    }

    protected void tguestkeyReleased(KeyEvent ke) {
        String PATTERN = "^[0-9]{0,3}";
        Pattern patt = Pattern.compile(PATTERN);
        Matcher match = patt.matcher(tguest.getText());
        if (!match.matches()) {
            tguest.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, (new java.awt.Color(255, 0, 0))));
            tgustc = false;
        } else {
            tgustc = true;
            tguest.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(0, 255, 0)));
        }
    }

  
    protected void clearActionPerformed(ActionEvent evt) {
        // tname.setText("");
        tID.setText("");
        tguest.setText("");
        tRoomNo.setText("");
        tcheck_in.setText("");
        tprice.setText("");
        tID.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(0, 0, 0)));
        tguest.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(0, 0, 0)));
        tRoomNo.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(0, 0, 0)));
        tcheck_in.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(0, 0, 0)));
        tprice.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(0, 0, 0)));
        tidc=false;
        tgustc=false;
        troom_no=false;
        tcheck_inc=false;

    }

    // Don't touch Here ... Warning you
    protected void jButton2ActionPerformed(ActionEvent evt,String Manager_name, String Email) {
        boolean check = false;
        String room = tRoomNo.getText();
        String gust = tguest.getText();

        Double price = 0d;
        if (gust.length() == 0) {
            gust = "0";
        }
        if (troom_no != true || tcheck_inc != true || tidc != true || tgustc != true || tnamec != true) {
            JOptionPane.showMessageDialog(jButton2, "Invalid Details", " Invalid details", JOptionPane.WARNING_MESSAGE);
        } else if (room.equals("") || room.length() <= 2) {
            JOptionPane.showMessageDialog(jButton2, "Room No Invalid ) :", "Room No Invalid", JOptionPane.WARNING_MESSAGE);
        } else {
            try {
                Connection con = new dbConnection().getDbconnection();

                Statement stm = con.createStatement();
                String sql1 = "select id,email from customer_details where email='" + tname.getText() + "'";
                ResultSet rset = stm.executeQuery(sql1);
                if (rset.next()) {
                    String ans = "";
                    for (int i = 0; i < room.length(); i++) {
                        if (room.charAt(i) == ',') {
                            continue;
                        } else {
                            ans += room.charAt(i);
                        }
                    }

                    if (ans.length() % 3 == 0) {
                        String t = "";
                        for (int i = 0; i < ans.length(); i++) {
                            t += ans.charAt(i);
                            if (t.length() == 3) {
                                try {
                                    Connection conn = new dbConnection().getDbconnection();
                                    Statement stmm = conn.createStatement();
                                    String q = "select room_status from room_info where room_no='" + t + "'";
                                    ResultSet r = stmm.executeQuery(q);
                                    if (r.next()) {
                                        if (r.getBoolean("room_status") != false && check == false) {
                                            check = false;
                                        } else {
                                            check = true;
                                        }
                                    } else {
                                        JOptionPane.showMessageDialog(jButton2, "Invalid Room Number", "Invalid Room Choice", JOptionPane.WARNING_MESSAGE);
                                        check = true;
                                        break;
                                    }
                                    conn.close();
                                    t = "";
                                } catch (Exception e) {
                                    // System.out.println("flase" + e);
                                }
                            }
                        }
                        if (check == false) {
                            for(int i=0; i<ans.length(); i++) {
                                t+=ans.charAt(i);
                                if(t.length()==3) {
                                    Statement stmm = con.createStatement();
                                    String q = "update room_info set room_status="+false+",customer_id="+rset.getInt("id")+" where room_no='"+t+"'";
                                    stmm.executeUpdate(q);
                                    String sq = "select * from room_info where room_no='"+t+"'";
                                    ResultSet rs = stmm.executeQuery(sq);
                                    if(rs.next()) {
                                        price+=rs.getDouble("price");
                                    }
                                    q = "insert into customer_total_room_details values("+rset.getInt("id")+","+rs.getInt("room_no")+",to_date('"+tcheck_in.getText()+"','dd-mm-yyyy'),'1111-11-11',"+rs.getDouble("price")+",'"+tname.getText()+"', 0)";
                                    Statement stmmm = con.createStatement();
                                    stmmm.executeUpdate(q);
                                    t="";
                                }
                            }
                            Statement stm1 = con.createStatement();
                            String q = "insert into room_reservation_details values("+Integer.toString(rset.getInt("id"))+",'"+rset.getString("email")+"',to_date('"+tcheck_in.getText()+"','dd-mm-yyyy'),"+tID.getText()+","+tguest.getText()+")";
                            int temp =stm1.executeUpdate(q);
                            if (temp != 0) {
                                // here email send to customer 
                                JOptionPane.showMessageDialog(jButton2, "Room Booked Successfully", "Reservation is done", JOptionPane.DEFAULT_OPTION);
                                if(evt.getSource()==jButton2) {
                                    dispose();
                                    new Customise_Room(Manager_name,Email).setVisible(true);
                                }
                                
                                
//                                Mail_sending.SendReserverMail(rset.getString("email"));
                            } else {
                                JOptionPane.showMessageDialog(jButton2, "Somthing went wrong !", "Can't Recorded", JOptionPane.WARNING_MESSAGE);
                            }
                        } else {
                            JOptionPane.showMessageDialog(jButton2, "Something Wrong while choosing Room No", " Invalid Room No ) :", JOptionPane.WARNING_MESSAGE);
                        }
                    } else {
                        JOptionPane.showMessageDialog(jButton2, "Room No Invalid ) :", "Room No Invalid", JOptionPane.WARNING_MESSAGE);
                    }
                } else {
                    JOptionPane.showMessageDialog(jButton2, "No Such Info is available ", "Records Not Founds ", JOptionPane.ERROR_MESSAGE);
                }
                con.close();
            } catch (Exception e) {
                System.out.println(e);
            }

        }
    }

    protected void RoomTypeActionPerformed(ActionEvent evt) {
        int s = bedList.getSelectedIndex();
        int t = RoomType.getSelectedIndex();
        // System.out.println(bedList.getSelectedItem() + " " + RoomType.getSelectedItem());
        DefaultTableModel tablemodel = (DefaultTableModel) DataTable.getModel();
        while (DataTable.getRowCount() > 0) {
            tablemodel.removeRow(DataTable.getRowCount() - 1);
        }
        if (s >= 1 && t >= 1) {
            try {
                Connection con = new dbConnection().getDbconnection();
                Statement stm = con.createStatement();

                String q = "select room_no,bed,room_type,price from room_info where room_status=" + true + " and bed='" + bedList.getSelectedItem().toString().toLowerCase() + "' and room_type='" + RoomType.getSelectedItem() + "'";
                ResultSet rs = stm.executeQuery(q);

                while (rs.next()) {

                    String MaS[] = {Integer.toString(rs.getInt("room_no")), rs.getString("bed"), rs.getString("room_type"), Double.toString(rs.getDouble("price"))};
                    tablemodel.addRow(MaS);

                    // System.out.println(rs.getInt("room_no") + " " + rs.getString("bed") + " " + rs.getString("room_type") + " " + rs.getDouble("price"));

                }
                con.close();
            } catch (Exception e) {
                System.out.println(e);
            }
        } else if (t == 0 && s == 0) {
            try {
                Connection con = new dbConnection().getDbconnection();
                Statement stm = con.createStatement();

                String q = "select room_no,bed,room_type,price from room_info where room_status=" + true + "";
                ResultSet rs = stm.executeQuery(q);
                while (rs.next()) {
                    String MaS[] = {Integer.toString(rs.getInt("room_no")), rs.getString("bed"), rs.getString("room_type"), Double.toString(rs.getDouble("price"))};
                    // DefaultTableModel tablemodel = (DefaultTableModel)DataTable.getModel();
                    tablemodel.addRow(MaS);
                    // System.out.println(rs.getInt("room_no") + " " + rs.getString("bed") + " " + rs.getString("room_type") + " " + rs.getDouble("price"));

                }
                con.close();
            } catch (Exception e) {
                System.out.println(e);
            }
        } else if (s == 0 && t >= 1) {
            try {
                Connection con = new dbConnection().getDbconnection();
                Statement stm = con.createStatement();

                String q = "select room_no,bed,room_type,price from room_info where room_status=" + true + " and room_type='" + RoomType.getSelectedItem() + "'";
                ResultSet rs = stm.executeQuery(q);
                while (rs.next()) {
                    String MaS[] = {Integer.toString(rs.getInt("room_no")), rs.getString("bed"), rs.getString("room_type"), Double.toString(rs.getDouble("price"))};
                    // DefaultTableModel tablemodel = (DefaultTableModel)DataTable.getModel();
                    tablemodel.addRow(MaS);
                    // System.out.println(rs.getInt("room_no") + " " + rs.getString("bed") + " " + rs.getString("room_type") + " " + rs.getDouble("price"));
                }
                con.close();
            } catch (Exception e) {
                System.out.println(e);
            }
        }
    }

    protected void bedListActionPerformed(ActionEvent evt) {
        int s = bedList.getSelectedIndex();
        int t = RoomType.getSelectedIndex();
        // System.out.println(bedList.getSelectedItem() + " " + RoomType.getSelectedItem());
        DefaultTableModel tablemodel = (DefaultTableModel) DataTable.getModel();
        while (DataTable.getRowCount() > 0) {
            tablemodel.removeRow(DataTable.getRowCount() - 1);
        }
        if (s >= 1 && t >= 1) {
            // System.out.println("room type selected : "+t + " "+ s);
            // System.out.println(bedList.getSelectedItem()+" "+RoomType.getSelectedItem());

            try {
                Connection con = new dbConnection().getDbconnection();
                Statement stm = con.createStatement();

                String q = "select room_no,bed,room_type,price from room_info where room_status=" + true + " and bed='" + bedList.getSelectedItem().toString().toLowerCase() + "' and room_type='" + RoomType.getSelectedItem() + "'";
                ResultSet rs = stm.executeQuery(q);
                while (rs.next()) {
                    String MaS[] = {Integer.toString(rs.getInt("room_no")), rs.getString("bed"), rs.getString("room_type"), Double.toString(rs.getDouble("price"))};

                    tablemodel.addRow(MaS);
                    // System.out.println(rs.getInt("room_no") + " " + rs.getString("bed") + " " + rs.getString("room_type") + " " + rs.getDouble("price"));

                }
                con.close();
            } catch (Exception e) {
                System.out.println(e);
            }
        } else if (t == 0 && s == 0) {
            try {
                Connection con = new dbConnection().getDbconnection();
                Statement stm = con.createStatement();

                String q = "select room_no,bed,room_type,price from room_info where room_status=" + true + "";
                ResultSet rs = stm.executeQuery(q);
                while (rs.next()) {
                    String MaS[] = {Integer.toString(rs.getInt("room_no")), rs.getString("bed"), rs.getString("room_type"), Double.toString(rs.getDouble("price"))};
                    tablemodel.addRow(MaS);
                    System.out.println(rs.getInt("room_no") + " " + rs.getString("bed") + " " + rs.getString("room_type") + " " + rs.getDouble("price"));

                }
                con.close();
            } catch (Exception e) {
                System.out.println(e);
            }
        } else if (t == 0 && s >= 1) {
            try {
                Connection con = new dbConnection().getDbconnection();
                Statement stm = con.createStatement();

                String q = "select room_no,bed,room_type,price from room_info where room_status=" + true + " and bed='" + bedList.getSelectedItem().toString().toLowerCase() + "'";
                ResultSet rs = stm.executeQuery(q);
                while (rs.next()) {
                    String MaS[] = {Integer.toString(rs.getInt("room_no")), rs.getString("bed"), rs.getString("room_type"), Double.toString(rs.getDouble("price"))};
                    tablemodel.addRow(MaS);
                    // System.out.println(rs.getInt("room_no") + " " + rs.getString("bed") + " " + rs.getString("room_type") + " " + rs.getDouble("price"));

                }
                con.close();
            } catch (Exception e) {
                System.out.println(e);
            }
        }
    }

    /**
     * @param args the command line arguments
     */
    // public static void main(String args[]) {
    //     /* Set the Nimbus look and feel */
    //     //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
    //     /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
    //      * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
    //      */
    //     try {
    //         for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
    //             if ("Nimbus".equals(info.getName())) {
    //                 javax.swing.UIManager.setLookAndFeel(info.getClassName());
    //                 break;
    //             }
    //         }
    //     } catch (ClassNotFoundException ex) {
    //         java.util.logging.Logger.getLogger(Room_Booking.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    //     } catch (InstantiationException ex) {
    //         java.util.logging.Logger.getLogger(Room_Booking.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    //     } catch (IllegalAccessException ex) {
    //         java.util.logging.Logger.getLogger(Room_Booking.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    //     } catch (javax.swing.UnsupportedLookAndFeelException ex) {
    //         java.util.logging.Logger.getLogger(Room_Booking.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    //     }
    //     //</editor-fold>
    //     //</editor-fold>

    //     /* Create and display the form */
    //     java.awt.EventQueue.invokeLater(new Runnable() {
    //         public void run() {
    //             new Room_Booking("name","gadesaurabh215@gmail.com").setVisible(true);
    //         }
    //     });
    // }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel BookPanel;
    private javax.swing.JScrollPane DataScroll;
    private javax.swing.JTable DataTable;
    private javax.swing.JComboBox<String> RoomType;
    private javax.swing.JComboBox<String> bedList;
    private javax.swing.JButton clear;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JLabel lBed;
    private javax.swing.JLabel lCustomeRoom;
    private javax.swing.JLabel lHome1;
    private javax.swing.JLabel lRoomBooking1;
    private javax.swing.JLabel lRoomOut1;
    private javax.swing.JLabel lRoomType;
    private javax.swing.JLabel lRoonNo;
    private javax.swing.JLabel lcheck_in;
    private javax.swing.JLabel lguest;
    private javax.swing.JLabel lid;
    private javax.swing.JLabel lname;
    private javax.swing.JLabel lprice;
    private javax.swing.JTextField tID;
    private javax.swing.JTextField tRoomNo;
    private javax.swing.JTextField tcheck_in;
    private javax.swing.JTextField tguest;
    private javax.swing.JTextField tname;
    private javax.swing.JTextField tprice;
    // End of variables declaration//GEN-END:variables
}
