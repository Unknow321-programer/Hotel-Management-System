// package hotel_management_system;

import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.awt.event.MouseEvent;
import java.sql.Connection;
import java.sql.Driver;

import java.sql.ResultSet;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import javax.naming.spi.DirStateFactory.Result;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
 

/**
 *
 * @author admin
 */
public class Customise_Room extends javax.swing.JFrame {

    /**
     * Creates new form Customize_Room
     */
    boolean email=true,tcheck_inc=true,tgustc=false,room_no=false,tcheck_out=true;
    public Customise_Room(String name ,String email) {
        initComponents(name,email);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents(String Manager_name,String CustEmail) {

        Container = new javax.swing.JPanel();
        Book_Toggle = new javax.swing.JToggleButton();
        Out = new javax.swing.JButton();
        Out_Toggle = new javax.swing.JToggleButton();
        jLabel3 = new javax.swing.JLabel();
        lBedType = new javax.swing.JLabel();
        lCheckIn = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        temail = new javax.swing.JTextField();
        tTotalGuest = new javax.swing.JTextField();
        lRoomType = new javax.swing.JLabel();
        lRoomNo = new javax.swing.JLabel();
        tCheckIn = new javax.swing.JTextField();
        tRoomNo = new javax.swing.JTextField();
        RoomType = new javax.swing.JComboBox<>();
        BedType = new javax.swing.JComboBox<>();
        tCheckOut = new javax.swing.JTextField();
        lCheckOut = new javax.swing.JLabel();
        lprice = new javax.swing.JLabel();
        lTotalPrice = new javax.swing.JLabel();
        tTotalPrice = new javax.swing.JTextField();
        tPrice = new javax.swing.JTextField();
        Book = new javax.swing.JButton();
        Room_Available_Detail = new javax.swing.JScrollPane();
        Room_Available = new javax.swing.JTable();
        Customer_Rooms = new javax.swing.JScrollPane();
        Customer_Book = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        lRoomBooking = new javax.swing.JLabel();
        lRoomOut = new javax.swing.JLabel();
        lCustomeRoom = new javax.swing.JLabel();
        lHome = new javax.swing.JLabel();
        bg = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        Container.setBackground(new java.awt.Color(153, 204, 255));

        Book_Toggle.setBackground(new java.awt.Color(255, 102, 0));
        Book_Toggle.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        Book_Toggle.setForeground(new java.awt.Color(255, 255, 255));
        Book_Toggle.setText("To Book Room");
        Book_Toggle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Book_ToggleActionPerformed(evt);
            }
        });

        Out.setBackground(new java.awt.Color(255, 153, 0));
        Out.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        Out.setForeground(new java.awt.Color(255, 255, 255));
        Out.setText("Out");
        Out.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent ae) {
                OutActionPerformed(ae);
            }
        });
        Out.setEnabled(false);

        Out_Toggle.setBackground(new java.awt.Color(255, 102, 0));
        Out_Toggle.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        Out_Toggle.setForeground(new java.awt.Color(255, 255, 255));
        Out_Toggle.setText("To Free Room");
        Out_Toggle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Out_ToggleActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        jLabel3.setText("Email:-");

        lBedType.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        lBedType.setText("Bed Type:-");

        lCheckIn.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        lCheckIn.setText("Check In :-");

        jLabel6.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        jLabel6.setText("Total Guest:-");

        temail.setEditable(false);
        temail.setBackground(new java.awt.Color(153, 204, 255));
        temail.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(0, 0, 0)));
        temail.setEnabled(false);
        temail.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent ke) {
                temailkeyReleased(ke);
            }
        });
        temail.setText(CustEmail);
        temail.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(0, 255, 0)));

        tTotalGuest.setBackground(new java.awt.Color(153, 204, 255));
        tTotalGuest.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(0, 0, 0)));
        tTotalGuest.setEnabled(false);
        tTotalGuest.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent ke) {
                tTotalGuestkeyReleased(ke);
            }
        });

        lRoomType.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        lRoomType.setText("Room Type:- ");

        lRoomNo.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        lRoomNo.setText("Room No. :-");

        tCheckIn.setBackground(new java.awt.Color(153, 204, 255));
        tCheckIn.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(0, 0, 0)));
        tCheckIn.setEnabled(false);
        tCheckIn.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent ke) {
                tCheckInkeyReleased(ke);
            }
        });

        tRoomNo.setBackground(new java.awt.Color(153, 204, 255));
        tRoomNo.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(0, 0, 0)));
        tRoomNo.setEnabled(false);
        tRoomNo.addKeyListener(new java.awt.event.KeyAdapter() {
            Boolean d=false,other=false;
            String a="";
            public void keyReleased(java.awt.event.KeyEvent ke) {
                int j = ke.getKeyCode();
                if(j!=KeyEvent.VK_BACK_SPACE && j!=KeyEvent.VK_DELETE) {
                    char c = ke.getKeyChar();
                    if( (((c>='0' && c<='9') || c==',') && other!=true)) {
                        d=true;
                        if((c>='0' && c<='9')) {
                            a+=c;
                        }
                    }
                    else{
                        other=true;
                    }
                    
                }
                if(j==KeyEvent.VK_BACK_SPACE || j==KeyEvent.VK_DELETE && tRoomNo.getText()!=null) {
                    other=false;d=false;a="";
                    String s = tRoomNo.getText();
                    
                    if(s.length()!=0) {
                        for (int i = 0; i < s.length(); i++) {
                            if( (s.charAt(i)>='0' && s.charAt(i)<='9') || s.charAt(i)==',') {
                                d=true;
                                if((s.charAt(i)>='0' && s.charAt(i)<='9')) {
                                    a+=s.charAt(i);
                                }
                            }
                            else {
                                d=false;
                                other=true;
                            }
                        }
                    }
                }
                if(d==true && other==false && (a.length()%3==0)) {
                    tRoomNo.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, java.awt.Color.GREEN));
                    room_no=true;
                    String t="";
                    Double price =0d;
                    for(int i=0; i<a.length() ; i++) {
                        t+=a.charAt(i);
                        if(t.length()==3) {
                            try {
                                Connection con = new dbConnection().getDbconnection();
                                Statement stm = con.createStatement();
                                String sq = "select price from room_info where room_no='"+t+"'";
                                ResultSet rs = stm.executeQuery(sq);
                                if(rs.next()) {
                                    price+=rs.getDouble("price");
                                    tPrice.setText(Double.toString(rs.getDouble("price")));
                                }
                                con.close();
                            }
                            catch(Exception e) {
                                // System.out.println(e);
                            }
                            t="";
                        }
                    }
                    tTotalPrice.setText(Double.toString(price));
                    price=0d;
                    // Log.setVisible(true);
                }
                else {
                    room_no=false;
                    tRoomNo.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, java.awt.Color.RED));
                    // Log.setVisible(false);
                }
                
            }
            
        });

        RoomType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Room Type", "non-Ac", "Ac" }));
        RoomType.setEnabled(false);
        RoomType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent ae) {
                RoomTypeActionPerformed(ae);
            }
        });

        BedType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Bed Type", "Single", "Double" }));
        BedType.setEnabled(false);
        BedType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent ae) {
                BedTypeActionPerformed(ae);
            }
        });

        tCheckOut.setBackground(new java.awt.Color(153, 204, 255));
        tCheckOut.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(0, 0, 0)));
        tCheckOut.setEnabled(false);
        tCheckOut.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent ke) {
                tCheckOutkeyReleased(ke);
            }
        });

        lCheckOut.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        lCheckOut.setText("Check Out:- ");

        lprice.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        lprice.setText("Price:-");

        lTotalPrice.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        lTotalPrice.setText("Total Price:-");

        tTotalPrice.setEditable(false);
        tTotalPrice.setBackground(new java.awt.Color(153, 204, 255));
        tTotalPrice.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(0, 0, 0)));
        // tTotalPrice.setEnabled(false);
        tTotalPrice.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent ke) {
                tTotalPricekeyReleased(ke);
            }
        });

        tPrice.setEditable(false);
        tPrice.setBackground(new java.awt.Color(153, 204, 255));
        tPrice.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(0, 0, 0)));
        tPrice.setEnabled(false);
        tPrice.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent ke) {
                tPricekeyReleased(ke);
            }
        });

        Book.setBackground(new java.awt.Color(255, 153, 0));
        Book.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        Book.setForeground(new java.awt.Color(255, 255, 255));
        Book.setText("Book");
        Book.setEnabled(false);
        Book.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent ae) {
                BookActionPerformed(ae);
            }
        });

        javax.swing.GroupLayout ContainerLayout = new javax.swing.GroupLayout(Container);
        Container.setLayout(ContainerLayout);
        ContainerLayout.setHorizontalGroup(
            ContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ContainerLayout.createSequentialGroup()
                .addGap(57, 57, 57)
                .addGroup(ContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ContainerLayout.createSequentialGroup()
                        .addGroup(ContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(ContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(lRoomType)
                                .addComponent(jLabel6)
                                .addComponent(temail)
                                .addComponent(tTotalGuest)
                                .addComponent(RoomType, 0, 260, Short.MAX_VALUE))
                            .addComponent(jLabel3))
                        .addGap(54, 54, 54)
                        .addGroup(ContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(ContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(ContainerLayout.createSequentialGroup()
                                    .addComponent(Book, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(Out, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(ContainerLayout.createSequentialGroup()
                                    .addGroup(ContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(tCheckIn, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(lCheckIn))
                                    .addGap(56, 56, 56)
                                    .addGroup(ContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(lCheckOut)
                                        .addGroup(ContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(lTotalPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(tTotalPrice, javax.swing.GroupLayout.DEFAULT_SIZE, 260, Short.MAX_VALUE)
                                            .addComponent(tPrice))
                                        .addComponent(tCheckOut, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(lprice))))
                            .addComponent(lRoomNo)
                            .addComponent(tRoomNo, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lBedType)
                            .addGroup(ContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(Out_Toggle)
                                .addComponent(BedType, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(ContainerLayout.createSequentialGroup()
                        .addGap(297, 297, 297)
                        .addComponent(Book_Toggle)))
                .addContainerGap(53, Short.MAX_VALUE))
        );
        ContainerLayout.setVerticalGroup(
            ContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ContainerLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(ContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Book_Toggle)
                    .addComponent(Out_Toggle))
                .addGap(11, 11, 11)
                .addGroup(ContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lBedType)
                    .addComponent(jLabel3)
                    .addComponent(lCheckOut))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(ContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BedType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(temail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tCheckOut, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(ContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(lRoomNo)
                    .addComponent(lprice))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(ContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tTotalGuest, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tRoomNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(ContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lTotalPrice)
                    .addComponent(lCheckIn)
                    .addComponent(lRoomType))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(ContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(RoomType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tCheckIn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tTotalPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(ContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Book)
                    .addComponent(Out))
                .addGap(23, 23, 23))
        );

        getContentPane().add(Container, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 110, 1000, 280));

        Room_Available.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
            },
            new String [] {
                "Room_No", "Bed ", "Room Type", "Price"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        Room_Available_Detail.setViewportView(Room_Available);
        DefaultTableModel roomtablemodel = (DefaultTableModel)Room_Available.getModel();
        try {
            Connection con = new dbConnection().getDbconnection();
            Statement stm = con.createStatement();
            String q = "select room_no,bed,room_type,price from room_info where room_status='"+true+"'";
            ResultSet rs= stm.executeQuery(q);
            while(rs.next()) {
                String datarow[] = {Integer.toString(rs.getInt("room_no")),rs.getString("bed"),rs.getString("room_type"),Double.toString(rs.getDouble("price"))};
                roomtablemodel.addRow(datarow);
            }
        }
        catch(Exception e) {
            System.out.println(e);
        }

        getContentPane().add(Room_Available_Detail, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 440, 480, 250));

        Customer_Book.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
            },
            new String [] {
                "Room_No", "Bed ", "Room Type", "Price"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        Customer_Rooms.setViewportView(Customer_Book);
        DefaultTableModel dtm = (DefaultTableModel)Customer_Book.getModel();
        try {
            Connection con = new dbConnection().getDbconnection();
            Statement stm = con.createStatement();
            
            String q = "select customer_id from room_reservation_details where email ='"+CustEmail+"'";
            ResultSet rs = stm.executeQuery(q);
            rs.next();
            q = "select room_no,bed,room_type,price from room_info where customer_id="+rs.getInt("customer_id")+"";
            Statement stmm = con.createStatement();
            ResultSet rs1= stmm.executeQuery(q);
            while(rs1.next()) {
                String datarow[] = {Integer.toString(rs1.getInt("room_no")),rs1.getString("bed"),rs1.getString("room_type"),Double.toString(rs1.getDouble("price"))};
                dtm.addRow(datarow);
            }
        }
        catch(Exception e) {
            System.out.println(e);
        }

        getContentPane().add(Customer_Rooms, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 440, 490, 250));

        jPanel1.setBackground(new java.awt.Color(255, 102, 51));

        jLabel1.setFont(new java.awt.Font("Segoe UI Black", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Customer Rooms ");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(144, 144, 144)
                .addComponent(jLabel1)
                .addContainerGap(164, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addGap(0, 24, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 410, 470, 50));

        jPanel2.setBackground(new java.awt.Color(255, 102, 51));

        jLabel2.setFont(new java.awt.Font("Segoe UI Black", 1, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Available Rooms");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(153, Short.MAX_VALUE)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(140, 140, 140))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jLabel2)
                .addGap(0, 14, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 410, 460, 40));

        jPanel3.setBackground(new java.awt.Color(255, 102, 51));

        lRoomBooking.setFont(new java.awt.Font("Imprint MT Shadow", 1, 18)); // NOI18N
        lRoomBooking.setForeground(new java.awt.Color(255, 255, 255));
        lRoomBooking.setText("Room Booking");
        lRoomBooking.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent e) {
                lRoomBookingMouseEnterd(e);
            }
            public void mouseClicked(java.awt.event.MouseEvent me) {
                lRoomBookingMouseClicked(me);
            }
            public void mouseExited(java.awt.event.MouseEvent me) {
                lRoomBookingMouseExited(me);
            }
        });

        lRoomOut.setFont(new java.awt.Font("Imprint MT Shadow", 1, 18)); // NOI18N
        lRoomOut.setForeground(new java.awt.Color(255, 255, 255));
        lRoomOut.setText("Room Out");
        lRoomOut.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent e) {
                lRoomOutMouseEnterd(e);
            }
            public void mouseClicked(java.awt.event.MouseEvent me) {
                lRoomOutMouseClicked(me,Manager_name,CustEmail);
            }
            public void mouseExited(java.awt.event.MouseEvent me) {
                lRoomOutMouseExited(me);
            }
        });

        lCustomeRoom.setFont(new java.awt.Font("Imprint MT Shadow", 1, 18)); // NOI18N
        lCustomeRoom.setForeground(new java.awt.Color(255, 255, 255));
        lCustomeRoom.setText("Customize Room");
        lCustomeRoom.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(255, 255, 102)));
        lCustomeRoom.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent e) {
                lCustomeRoomMouseEnterd(e);
            }
            public void mouseClicked(java.awt.event.MouseEvent me) {
                lCustomeRoomMouseClicked(me,Manager_name);
            }
            public void mouseExited(java.awt.event.MouseEvent me) {
                lCustomeRoomMouseExited(me);
            }
        });

        lHome.setFont(new java.awt.Font("Imprint MT Shadow", 1, 18)); // NOI18N
        lHome.setForeground(new java.awt.Color(255, 255, 255));
        lHome.setText("Home");
        lHome.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent e) {
                lhomeMouseEnterd(e);
            }
            public void mouseClicked(java.awt.event.MouseEvent me) {
                lhomeMouseClicked(me,Manager_name);
            }
            public void mouseExited(java.awt.event.MouseEvent me) {
                lhomeMouseExited(me);
            }
        });

        

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(lHome)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 381, Short.MAX_VALUE)
                .addComponent(lRoomBooking, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(95, 95, 95)
                .addComponent(lRoomOut)
                .addGap(104, 104, 104)
                .addComponent(lCustomeRoom)
                .addGap(60, 60, 60))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lRoomBooking)
                    .addComponent(lRoomOut)
                    .addComponent(lHome)
                    .addComponent(lCustomeRoom, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        getContentPane().add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1080, 40));

        bg.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        bg.setIcon(new javax.swing.ImageIcon(getClass().getResource("Images/bg1.jpeg"))); // NOI18N
        getContentPane().add(bg, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1080, 700));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    // room out here
    protected void lRoomOutMouseExited(MouseEvent me) {
        lRoomOut.setForeground(new java.awt.Color(255, 255, 255));
        lRoomOut.setBorder(null);
    }

    protected void lRoomOutMouseClicked(MouseEvent me, String manager_name, String custEmail) {
        if(me.getSource()==lRoomOut) {
            dispose();
            new RE(manager_name,custEmail).setVisible(true);
        }
    }

    protected void lRoomOutMouseEnterd(MouseEvent e) {
        lRoomOut.setForeground(new java.awt.Color(126,90,200));
        lRoomOut.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, java.awt.Color.BLACK));
    }

    // room booking here
    protected void lRoomBookingMouseExited(MouseEvent me) {
        lRoomBooking.setForeground(new java.awt.Color(255, 255, 255));
        lRoomBooking.setBorder(null);
    }

    protected void lRoomBookingMouseClicked(MouseEvent me) {
    }

    protected void lRoomBookingMouseEnterd(MouseEvent e) {
        lRoomBooking.setForeground(new java.awt.Color(255,000,000));
        lRoomBooking.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, java.awt.Color.BLACK));
    }

    // customise room here
    protected void lCustomeRoomMouseClicked(MouseEvent me, String manager_name) {
    }

    protected void lCustomeRoomMouseExited(MouseEvent me) {
        lCustomeRoom.setForeground(new java.awt.Color(255, 255, 255));
        lCustomeRoom.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(255, 255, 102)));
    }

    protected void lCustomeRoomMouseEnterd(MouseEvent e) {
        lCustomeRoom.setForeground(new java.awt.Color(126,90,200));
        lCustomeRoom.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, java.awt.Color.BLACK));
    }

    // home here
    protected void lhomeMouseExited(java.awt.event.MouseEvent me) {
        lHome.setForeground(new java.awt.Color(255, 255, 255));
        lHome.setBorder(null);
    }

    protected void lhomeMouseClicked(java.awt.event.MouseEvent me,String name) {
        if(me.getSource()==lHome) {
            dispose();
            new Manager_Home(name).setVisible(true);
        }
    }

    protected void lhomeMouseEnterd(java.awt.event.MouseEvent e) {
        lHome.setForeground(new java.awt.Color(126,90,200));
        lHome.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, java.awt.Color.BLACK));
    }



    // other here 
    private void Out_ToggleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Out_ToggleActionPerformed
        // TODO add your handling code here:
        Book_Toggle.setSelected(false);
        if(Out_Toggle.isSelected()){
            temail.setEnabled(true);
            RoomType.setEnabled(true);
            BedType.setEnabled(true);
            tRoomNo.setEnabled(true);
            tTotalPrice.setEnabled(true);
            tCheckOut.setEnabled(true);

            SimpleDateFormat DATE_FORMAT = new SimpleDateFormat("dd-MM-yyyy");
            Date today = new Date();
            java.sql.Date d = new java.sql.Date(today.getTime());
            tCheckOut.setText(DATE_FORMAT.format(d));
            tCheckOut.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(0, 255, 0)));
            tcheck_out=true;
            // tPricePerDay.setEnabled(true);
            // tTotalPrice.setEnabled(true);
            Out.setEnabled(true);
        }
        else {
            temail.setEnabled(false);
            RoomType.setEnabled(false);
            BedType.setEnabled(false);
            tRoomNo.setEnabled(false);
            tCheckOut.setEnabled(false);
            tTotalGuest.setEnabled(false);
            tCheckIn.setEnabled(false);
            // tPrice.setEnabled(false);

            // tPricePerDay.setEnabled(false);
            // tTotalPrice.setEnabled(false);
            Out.setEnabled(false);
            Book.setEnabled(false);

            tRoomNo.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(0, 0, 0)));
            tCheckOut.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(0, 0, 0)));
            tCheckIn.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(0, 0, 0)));
            tTotalGuest.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(0, 0, 0)));
            tRoomNo.setText("");
            tCheckIn.setText("");
            tCheckOut.setText("");
            tTotalGuest.setText("");

            room_no=false;
            tcheck_inc=false;
            tcheck_out=false;
            tgustc=false;
        }
    }//GEN-LAST:event_Out_ToggleActionPerformed
    
    private void Book_ToggleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Book_ToggleActionPerformed
        // TODO add your handling code here:
        Out_Toggle.setSelected(false);
        if(Book_Toggle.isSelected()){
            temail.setEnabled(true);
            tTotalGuest.setEnabled(true);
            RoomType.setEnabled(true);
            BedType.setEnabled(true);
            tRoomNo.setEnabled(true);
            tCheckIn.setEnabled(true);
            tPrice.setEnabled(true);
            Book.setEnabled(true);

            tCheckOut.setEnabled(false);

            // tPricePerDay.setEnabled(false);
            // tTotalPrice.setEnabled(false);
            SimpleDateFormat DATE_FORMAT = new SimpleDateFormat("dd-MM-yyyy");
            Date today = new Date();
            java.sql.Date d = new java.sql.Date(today.getTime());
            tCheckIn.setText(DATE_FORMAT.format(d));
            tCheckIn.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(0, 255, 0)));
            tcheck_inc=true;

            tCheckOut.setText("");
            tCheckOut.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(0, 0, 0)));
        }
        else {
            temail.setEnabled(false);
            tTotalGuest.setEnabled(false);
            RoomType.setEnabled(false);
            BedType.setEnabled(false);
            tRoomNo.setEnabled(false);
            tCheckIn.setEnabled(false);
            tCheckOut.setEnabled(false);
            // tTotalPrice.setEnabled(false);
            // tPrice.setEnabled(false);
            Book.setEnabled(false);

            tTotalPrice.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(0, 0, 0)));
            tTotalGuest.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(0, 0, 0)));
            // RoomType.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(0, 0, 0)));
            tRoomNo.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(0, 0, 0)));
            tCheckIn.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(0, 0, 0)));
            tCheckOut.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(0, 0, 0)));
            tTotalPrice.setText("");
            tPrice.setText("");
            tRoomNo.setText("");
            tTotalGuest.setText("");
            tCheckIn.setText("");
            tCheckOut.setText("");
            tcheck_inc=false;
            room_no=false;
            tgustc=false;
            tcheck_out=false;
        }
    }//GEN-LAST:event_Book_ToggleActionPerformed

    protected void RoomTypeActionPerformed(ActionEvent ae) {
        int s = BedType.getSelectedIndex();
        int t = RoomType.getSelectedIndex();
        // System.out.println(BedType.getSelectedItem()+" "+RoomType.getSelectedItem());
        DefaultTableModel tablemodel = (DefaultTableModel)Room_Available.getModel();
        while(Room_Available.getRowCount()>0)
        tablemodel.removeRow(Room_Available.getRowCount()-1);
        if(s>=1 && t>=1) {
            try {
                Connection con = new dbConnection().getDbconnection();
                Statement stm = con.createStatement();

                String q = "select room_no,bed,room_type,price from room_info where room_status="+true+" and bed='"+BedType.getSelectedItem().toString().toLowerCase()+"' and room_type='"+RoomType.getSelectedItem()+"'";
                ResultSet rs = stm.executeQuery(q);
                
                while(rs.next()) {

                    String MaS[] = {Integer.toString(rs.getInt("room_no")),rs.getString("bed"),rs.getString("room_type"),Double.toString(rs.getDouble("price"))};
                    tablemodel.addRow(MaS);
                    
                    // System.out.println(rs.getInt("room_no") + " "+rs.getString("bed") +" "+rs.getString("room_type")+" "+rs.getDouble("price"));

                }
                con.close();
            }
            catch(Exception e) {
                System.out.println(e);
            }
        }
        else if(t==0 && s==0) {
            try {
                Connection con = new dbConnection().getDbconnection();
                Statement stm = con.createStatement();

                String q = "select room_no,bed,room_type,price from room_info where room_status="+true+"";
                ResultSet rs = stm.executeQuery(q);
                while(rs.next()) {
                    String MaS[] = {Integer.toString(rs.getInt("room_no")),rs.getString("bed"),rs.getString("room_type"),Double.toString(rs.getDouble("price"))};
                    // DefaultTableModel tablemodel = (DefaultTableModel)DataTable.getModel();
                    tablemodel.addRow(MaS);
                    // System.out.println(rs.getInt("room_no") + " "+rs.getString("bed") +" "+rs.getString("room_type")+" "+rs.getDouble("price"));

                }
                con.close();
            }
            catch(Exception e) {
                System.out.println(e);
            }
        }
        else if(s==0 && t>=1) {
            try {
                Connection con = new dbConnection().getDbconnection();
                Statement stm = con.createStatement();

                String q = "select room_no,bed,room_type,price from room_info where room_status="+true+" and room_type='"+RoomType.getSelectedItem()+"'";
                ResultSet rs = stm.executeQuery(q);
                while(rs.next()) {
                    String MaS[] = {Integer.toString(rs.getInt("room_no")),rs.getString("bed"),rs.getString("room_type"),Double.toString(rs.getDouble("price"))};
                    // DefaultTableModel tablemodel = (DefaultTableModel)DataTable.getModel();
                    tablemodel.addRow(MaS);
                    // System.out.println(rs.getInt("room_no") + " "+rs.getString("bed") +" "+rs.getString("room_type")+" "+rs.getDouble("price"));
                }
                con.close();
            }
            catch(Exception e) {
                System.out.println(e);
            }
        }
    }

    protected void BedTypeActionPerformed(ActionEvent ae) {
        int s = BedType.getSelectedIndex();
        int t = RoomType.getSelectedIndex(); 
        // System.out.println(BedType.getSelectedItem()+" "+RoomType.getSelectedItem());
        DefaultTableModel tablemodel = (DefaultTableModel)Room_Available.getModel();
        while(Room_Available.getRowCount()>0)
        tablemodel.removeRow(Room_Available.getRowCount()-1);
        if(s>=1 && t>=1) {
            // System.out.println("room type selected : "+t + " "+ s);
            // System.out.println(bedList.getSelectedItem()+" "+RoomType.getSelectedItem());

            try {
                Connection con = new dbConnection().getDbconnection();
                Statement stm = con.createStatement();

                String q = "select room_no,bed,room_type,price from room_info where room_status="+true+" and bed='"+BedType.getSelectedItem().toString().toLowerCase()+"' and room_type='"+RoomType.getSelectedItem()+"'";
                ResultSet rs = stm.executeQuery(q);
                while(rs.next()) {
                    String MaS[] = {Integer.toString(rs.getInt("room_no")),rs.getString("bed"),rs.getString("room_type"),Double.toString(rs.getDouble("price"))};
                   
                    tablemodel.addRow(MaS);
                    // System.out.println(rs.getInt("room_no") + " "+rs.getString("bed") +" "+rs.getString("room_type")+" "+rs.getDouble("price"));

                }
                con.close();
            }
            catch(Exception e) {
                System.out.println(e);
            }
        }
        else if(t==0 && s==0) {
            try {
                Connection con = new dbConnection().getDbconnection();
                Statement stm = con.createStatement();

                String q = "select room_no,bed,room_type,price from room_info where room_status="+true+"";
                ResultSet rs = stm.executeQuery(q);
                while(rs.next()) {
                    String MaS[] = {Integer.toString(rs.getInt("room_no")),rs.getString("bed"),rs.getString("room_type"),Double.toString(rs.getDouble("price"))};
                    tablemodel.addRow(MaS);
                    // System.out.println(rs.getInt("room_no") + " "+rs.getString("bed") +" "+rs.getString("room_type")+" "+rs.getDouble("price"));

                }
                con.close();
            }
            catch(Exception e) {
                System.out.println(e);
            }
        }
        else if(t==0 && s>=1) {
            try {
                Connection con = new dbConnection().getDbconnection();
                Statement stm = con.createStatement();

                String q = "select room_no,bed,room_type,price from room_info where room_status="+true+" and bed='"+BedType.getSelectedItem().toString().toLowerCase()+"'";
                ResultSet rs = stm.executeQuery(q);
                while(rs.next()) {
                    String MaS[] = {Integer.toString(rs.getInt("room_no")),rs.getString("bed"),rs.getString("room_type"),Double.toString(rs.getDouble("price"))};
                    tablemodel.addRow(MaS);
                    // System.out.println(rs.getInt("room_no") + " "+rs.getString("bed") +" "+rs.getString("room_type")+" "+rs.getDouble("price"));

                }
                con.close();
            }
            catch(Exception e) {
                System.out.println(e);
            }
        }
    }

    protected void tDaysStayskeyReleased(KeyEvent ke) {
    }

    protected void tCheckOutkeyReleased(KeyEvent ke) {
        String PATTERN = "^[0-3][0-9]-[0-1][0-9]-[0-9]{4}$";
        Pattern patt = Pattern.compile(PATTERN);
        Matcher match = patt.matcher(tCheckOut.getText());
        
        if (!match.matches()) {
            tCheckOut.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, (new java.awt.Color(255, 0, 0))));
            tcheck_out =false;
        } else {
            String s = tCheckOut.getText();
            int i = s.indexOf("-");
            char c[] = new char[2];
            c[0] = s.charAt(i+1);
            c[1] = s.charAt(i+2);
            s = new String(c);
            i = Integer.parseInt(s);
            // System.out.println(i);
            if(i<=12) {
                tCheckOut.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(0, 255, 0)));
                tcheck_out=true;
            }
            else {
                tcheck_out=false;
                tCheckOut.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, (new java.awt.Color(255, 0, 0))));
            }
        }
        // if(tcheck_out == true) {
        //     int year = Integer.parseInt(tCheckIn.getText().substring(6, 10));
        //     int month = Integer.parseInt(tCheckIn.getText().substring(3, 5));
        //     int day = Integer.parseInt(tCheckIn.getText().substring(0, 2));
        //     int year2 = Integer.parseInt(tCheckOut.getText().substring(6, 10));
        //     int month2 = Integer.parseInt(tCheckOut.getText().substring(3, 5));
        //     int day2 = Integer.parseInt(tCheckOut.getText().substring(0, 2));
        //     if(year2>year) {
        //         tcheck_out = true;
        //     }
        //     else if(year2==year && month2>month) {
        //         tcheck_out = true;
        //     }
        //     else if(year2==year && month2==month && day2>=day) {
        //         tcheck_out=true;
        //     }
        //     else {
        //         tcheck_out=false;
        //     }
        // }
        // if(tcheck_out==true) {
        //     int a[] ={31,28,31,30,31,30,31,31,30,31,30,31};

        //     int totalday=0;
        //     String date = tCheckIn.getText();
        //     String date2 = tCheckOut.getText();

        //     int year = Integer.parseInt(date.substring(6, 10));
        //     int year2 =Integer.parseInt(date2.substring(6, 10));
        //     if(year%400==0 || (year%4==0 && year%100!=0) && Integer.parseInt(date.substring(3,5))<3) totalday++;
        //     if(year2%400==0 || (year2%4==0 && year2%100!=0) && Integer.parseInt(date2.substring(3,5))>=3) totalday++;
        //     System.out.println(year+" "+year2);

        //     if(year2 - year >=1) {
        //         for(int i=year+1 ; i<year2 ; i++) {
        //             if(i%400==0 || (i%4==0 && i%100!=0)) {
        //                 totalday+=366;
        //             }
        //             else {
        //                 totalday+=365;
        //             }
        //         }
        //         int month = Integer.parseInt(date.substring(3, 5));
        //         int day = Integer.parseInt(date.substring(0, 2));
        //         System.out.println(month+" "+day);
        //         for(int i=month; i<12; i++) {
        //             totalday+=a[i];
        //         }
        //         totalday+=a[month-1]-day;

        //         int month2 = Integer.parseInt(date2.substring(3, 5));
        //         int day2 = Integer.parseInt(date2.substring(0, 2));

        //         for(int i=0; i<month2-1; i++) {
        //             totalday+=a[i];
        //         }
        //         totalday+=day2;
        //     }
        //     else if(Integer.parseInt(date.substring(3, 5))!= Integer.parseInt(date2.substring(3, 5))){
        //         if(totalday>0) totalday--;
        //         int month = Integer.parseInt(date.substring(3, 5));
        //         int day = Integer.parseInt(date.substring(0, 2));
                
        //         int month2 = Integer.parseInt(date2.substring(3, 5));
        //         int day2 = Integer.parseInt(date2.substring(0, 2));
    
        //         System.out.println(month+" "+day+" second Year's "+month2+" "+day2);
        //         for(int i=month ; i<month2-1 ; i++) {
        //             totalday+=a[i];
        //         }
        //         totalday+=a[month-1]-day;
        //         totalday+= day2;
        //     }
        //     else {
        //     totalday = Integer.parseInt(date2.substring(0, 2))-Integer.parseInt(date.substring(0, 2));
        //     }
        //     tDaysStays.setText(Integer.toString(totalday));
        // }
    }

    protected void tPricekeyReleased(KeyEvent ke) {
    }

    protected void tTotalPricekeyReleased(KeyEvent ke) {
    }

    protected void tPricePerDaykeyReleased(KeyEvent ke) {
    }

    protected void tRoomNokeyReleased(KeyEvent ke) {
    }

    protected void tCheckInkeyReleased(KeyEvent ke) {
        String PATTERN = "^[0-3][0-9]-[0-1][0-9]-[0-9]{4}$";
        Pattern patt = Pattern.compile(PATTERN);
        Matcher match = patt.matcher(tCheckIn.getText());
        
        if (!match.matches()) {
            tCheckIn.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, (new java.awt.Color(255, 0, 0))));
            tcheck_inc =false;
        } else {
            String s = tCheckIn.getText();
            int i = s.indexOf("-");
            char c[] = new char[2];
            c[0] = s.charAt(i+1);
            c[1] = s.charAt(i+2);
            s = new String(c);
            i = Integer.parseInt(s);
            // System.out.println(i);
            if(i<=12) {
                tCheckIn.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(0, 255, 0)));
                tcheck_inc=true;
            }
            else {
                tcheck_inc=false;
                tCheckIn.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, (new java.awt.Color(255, 0, 0))));
            }
        }
    }

    protected void temailkeyReleased(KeyEvent ke) {
        String PATTERN = "^[_A-Za-z0-9-\\+]{6,30}+(\\.[_A-Za-z0-9-]+)*@"
                + "[A-Za-z0-9-]+(\\.[A-Za-z0-9]+)*(\\.[A-Za-z]{2,})$";
        Pattern patt = Pattern.compile(PATTERN);
        Matcher match = patt.matcher(temail.getText());
        if (!match.matches()) {
            // JOptionPane.showMessageDialog(null, "Please enter the username");
            temail.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, (new java.awt.Color(255, 0, 0))));
            email=false;

        } else {
            email=true;
            // try {
            //     Connection con = new dbConnection().getDbconnection();
            //     Statement stm = con.createStatement();
            //     String q = "select id from customer_details where='"+temail.getText()+"'";
            //     ResultSet rs = stm.executeQuery(q);
            //     while(rs.next()) {

            //     }
            // }
            // catch(Exception e) {
            //     System.out.println(e);
            // }
            temail.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(0, 255, 0)));
        }
    }

    protected void tTotalGuestkeyReleased(KeyEvent ke) {
        String PATTERN = "^[0-9]{0,3}";
        Pattern patt = Pattern.compile(PATTERN);
        Matcher match = patt.matcher(tTotalGuest.getText());
        if (!match.matches()) {
            tTotalGuest.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, (new java.awt.Color(255, 0, 0))));
            tgustc=false;
        } else {
            tgustc=true;
            tTotalGuest.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(0, 255, 0)));
        }
    }

    protected void OutActionPerformed(ActionEvent ae) {
        boolean check=false;
        if(temail.getText().equals("")) {
            JOptionPane.showMessageDialog(Out, "Empty Email", "Empty Email", JOptionPane.WARNING_MESSAGE);
        }
        else if(tCheckOut.getText().equals("")) {
            JOptionPane.showMessageDialog(Out, "Empty Out Date", "Empty Date", JOptionPane.WARNING_MESSAGE);
        }
        else if(tRoomNo.getText().equals("")) {
            JOptionPane.showMessageDialog(Out, "Empty Room No", "Empty", JOptionPane.WARNING_MESSAGE);
        }
        else if(room_no!=true || email!=true || tcheck_out!=true ) {
            JOptionPane.showMessageDialog(Out, "Invalid Inputs please Fill valid Info", "Invalid Input's", JOptionPane.WARNING_MESSAGE);
        }
        else {
            try {
                Connection con  = new dbConnection().getDbconnection();
                Statement stm = con.createStatement();
                String q = "select email,id from customer_details where email ='"+temail.getText()+"'";
                ResultSet rs = stm.executeQuery(q);
                if(rs.next()) {
                    String room_noa[] = tRoomNo.getText().split(",");
                    
                    for (int i = 0; i < room_noa.length; i++) {
                        Statement stmm = con.createStatement();
                        String sql = "select room_status from room_info where room_no="+room_noa[i]+" and customer_id="+rs.getInt("id")+"";
                        ResultSet rs1 = stmm.executeQuery(sql);
                        if(rs1.next()){
                            if(rs1.getBoolean("room_status")!=true) {
                                check = true;
                            }
                            else {
                                check=false;
                                break;
                            }
                        }
                        else {
                            check = false;
                            break;
                        }
                    }
                    if(check == true) {
                        for (int i = 0; i < room_noa.length; i++) {
                            Statement stm1 = con.createStatement();
                            String Q2 = "update room_info set room_status=true , customer_id=null where room_no="+room_noa[i]+"";
                            stm1.executeUpdate(Q2);
                            String Q3 = "update customer_total_room_details set date_out=to_date('"+tCheckOut.getText()+"','dd-mm-yyyy'), stay_days= to_date('"+tCheckOut.getText()+"','dd-mm-yyyy')-date_in where room_no="+room_noa[i]+"";
                            int x = stm1.executeUpdate(Q3);
                            if(x!=0) {
                                JOptionPane.showMessageDialog(Out, "Room No "+room_noa[i]+" is Exited", "Exits", JOptionPane.PLAIN_MESSAGE);
                            }
                            else {
                                JOptionPane.showMessageDialog(Out, "Room No "+room_noa[i]+" is Not Exited", "Something wrong", JOptionPane.WARNING_MESSAGE);
                            }
                        }
                    }
                    else {
                        JOptionPane.showMessageDialog(Out, "Some Room's Are You Not Booked", "Not Booked You", JOptionPane.WARNING_MESSAGE);
                    }
                }
                else {
                    JOptionPane.showMessageDialog(Out, "Invalid Mail are provided", "Invalid", JOptionPane.WARNING_MESSAGE);
                }
            }
            catch(Exception e) {
                System.out.println(e);
            }
        }
    }

    protected void BookActionPerformed(ActionEvent ae) {
        
        boolean check = false;
        if(temail.getText().equals("") && tRoomNo.getText().equals("")) {
            JOptionPane.showMessageDialog(temail, "Empty Email", "Empty Mail Or room number's", JOptionPane.WARNING_MESSAGE);
        }
        else if(tCheckIn.getText().equals("")) {
            JOptionPane.showMessageDialog(temail, "Enter Date", "Empty Date", JOptionPane.WARNING_MESSAGE);
        }
        else if(tcheck_inc!=true || email!=true || room_no!=true) {
            JOptionPane.showMessageDialog(temail, "Invalid Inputs", "Invalid Inputs", JOptionPane.WARNING_MESSAGE);
        }
        else {
            try {
                Connection con = new dbConnection().getDbconnection();
                Statement stm = con.createStatement();
                String q = "select email,id from customer_details where email='"+temail.getText()+"'";
                ResultSet rs = stm.executeQuery(q);
                if(rs.next()) {
                    String room_noa[] = tRoomNo.getText().split(",");
                    Double Price[] = new Double[room_noa.length];
                    for (int i = 0; i < room_noa.length; i++) {
                        Statement stmm = con.createStatement();
                        String sql = "select room_status,price from room_info where room_no="+room_noa[i]+"";
                        ResultSet rs1 = stmm.executeQuery(sql);
                        if(rs1.next()){
                            if(rs1.getBoolean("room_status")==true) {
                                check = true;
                                Price[i]=rs1.getDouble("price");
                            }
                            else {
                                check=false;
                                break;
                            }
                        }
                        else {
                            check = false;
                            break;
                        }
                    }
                    if(check!=false) {
                        // here insert and update data base otherwise send else room is not available;
                        for (int i = 0; i < room_noa.length; i++) {
                            Statement stm2 = con.createStatement();
                            String Q = "update room_info set room_status=false , customer_id="+rs.getInt("id")+" where room_no="+room_noa[i]+"";
                            stm2.executeUpdate(Q);
                            String Q2 = "insert into customer_total_room_details(id,room_no,date_in,price,email,date_out) values("+rs.getInt("id")+","+room_noa[i]+", to_date('"+tCheckIn.getText()+"','dd-mm-yyyy'),"+Price[i]+",'"+temail.getText()+"','1111-11-11')";
                            int x = stm2.executeUpdate(Q2);
                            if(x!=0) {
                                JOptionPane.showMessageDialog(Book, "Room No "+room_noa[i]+" is a booked !", "Fine", JOptionPane.PLAIN_MESSAGE);
                            }
                            else {
                                JOptionPane.showMessageDialog(Book, "Room No "+room_noa[i]+" is a not Booking !", "Wrong Room No", JOptionPane.WARNING_MESSAGE);
                            }
                        }
                        Statement stm3 = con.createStatement();
                        String Q3 = "update room_reservation_details set total_guest=total_guest+"+tTotalGuest.getText()+" where customer_id="+rs.getInt("id")+"";
                        stm3.executeUpdate(Q3);
                    }
                    else {
                        JOptionPane.showMessageDialog(Book, "some Room's Already Booked ", "Booked Booking", JOptionPane.WARNING_MESSAGE);
                    }
                }
                else {
                    JOptionPane.showMessageDialog(Book, "Details Are Not Available", "Something Wrong", JOptionPane.WARNING_MESSAGE);
                }
            }
            catch(Exception e) {
                System.out.println(e);
            }
        }
    }

    /**
     * @param args the command line arguments
     */

    // public static void main(String args[]) {
    //     /* Set the Nimbus look and feel */
    //     //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
    //     /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
    //      * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
    //      */
    //     try {
    //         for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
    //             if ("Nimbus".equals(info.getName())) {
    //                 javax.swing.UIManager.setLookAndFeel(info.getClassName());
    //                 break;
    //             }
    //         }
    //     } catch (ClassNotFoundException ex) {
    //         java.util.logging.Logger.getLogger(Customise_Room.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    //     } catch (InstantiationException ex) {
    //         java.util.logging.Logger.getLogger(Customise_Room.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    //     } catch (IllegalAccessException ex) {
    //         java.util.logging.Logger.getLogger(Customise_Room.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    //     } catch (javax.swing.UnsupportedLookAndFeelException ex) {
    //         java.util.logging.Logger.getLogger(Customise_Room.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    //     }
    //     //</editor-fold>

    //     /* Create and display the form */
    //     java.awt.EventQueue.invokeLater(new Runnable() {
    //         public void run() {
    //             new Customise_Room("name","gadesaurabh215@gmail.com").setVisible(true);
    //         }
    //     });
    // }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> BedType;
    private javax.swing.JButton Book;
    private javax.swing.JToggleButton Book_Toggle;
    private javax.swing.JPanel Container;
    private javax.swing.JTable Customer_Book;
    private javax.swing.JScrollPane Customer_Rooms;
    private javax.swing.JButton Out;
    private javax.swing.JToggleButton Out_Toggle;
    private javax.swing.JComboBox<String> RoomType;
    private javax.swing.JTable Room_Available;
    private javax.swing.JScrollPane Room_Available_Detail;
    private javax.swing.JLabel bg;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JLabel lBedType;
    private javax.swing.JLabel lCheckIn;
    private javax.swing.JLabel lCheckOut;
    private javax.swing.JLabel lCustomeRoom;
    private javax.swing.JLabel lHome;
    private javax.swing.JLabel lRoomBooking;
    private javax.swing.JLabel lRoomNo;
    private javax.swing.JLabel lRoomOut;
    private javax.swing.JLabel lRoomType;
    private javax.swing.JLabel lTotalPrice;
    private javax.swing.JLabel lprice;
    private javax.swing.JTextField tCheckIn;
    private javax.swing.JTextField tCheckOut;
    private javax.swing.JTextField tPrice;
    private javax.swing.JTextField tRoomNo;
    private javax.swing.JTextField tTotalGuest;
    private javax.swing.JTextField tTotalPrice;
    private javax.swing.JTextField temail;
    // End of variables declaration//GEN-END:variables
}
